#! perl -w
# Author:   Bert Muennich
# Website:  http://www.github.com/muennich/urxvt-perls
# License:  GPLv2

# Use keyboard shortcuts to select and copy text.

# Usage: put the following lines in your .Xdefaults/.Xresources:
#   URxvt.perl-ext-common: ...,keyboard-select
#   URxvt.keysym.M-Escape: perl:keyboard-select:activate
# The following line overwrites the default Meta-s binding and allows to
# activate keyboard-select directly in backward search mode:
#   URxvt.keysym.M-s: perl:keyboard-select:search

# Use Meta-Escape to activate selection mode, then use the following keys:
#   h/j/k/l:    Move cursor left/down/up/right (also with arrow keys)
#   g/G/0/^/$/H/M/L/f/F/;/,/w/W/b/B/e/E: More vi-like cursor movement keys
#   '/'/?:      Start forward/backward search
#   n/N:        Repeat last search, N: in reverse direction
#   Ctrl-f/b:   Scroll down/up one screen
#   Ctrl-d/u:   Scroll down/up half a screen
#   v/V/Ctrl-v: Toggle normal/linewise/blockwise selection
#   y/Return:   Copy selection to primary buffer, Return: deactivate afterwards
#   q/Escape:   Deactivate keyboard selection mode

sub log_message {
	my ($message) = @_;
	my $filename = '/tmp/_.log';
	open($fh, '>>', $filename);
	print $fh $message, "\n";
	close $fh;
	()
}

use strict;

sub on_start{
	my ($self) = @_;
	$self->{patterns}{'b'} = qr/.*\s\S/;
	$self->{patterns}{'f'} = qr/\s\S/;
	$self->{patterns}{'w'} = qr/\S(?=\s|$)/;
	()
}


sub on_action {
    my ($self, $action) = @_;
    on_user_command($self, "keyboard-select:" . $action);
}


sub on_user_command {
	my ($self, $cmd) = @_;
	if (not $self->{active}) {
		if ($cmd eq 'keyboard-select:activate') {
			activate($self);
		}
	}
	()
}

sub find_max_line_column {
	my ($self, $br, $er) = @_;
	my $max = 0;
	for(my $i=$br; $i <= $er; $i++) {
		my $l = $self->line($i)->l;
		if($max < $self->line($i)->l) {
			$max = $self->line($i)->l;
		}
	}
	$max
}

sub yank_selection {
	my ($self, $event) = @_;
	my ($br, $bc, $er, $ec) = calc_span($self);
	my $endLineSelected = $ec == $self->line($br)->l || $ec == $self->line($er)->l;
	if($self->{select} eq 'b' && $endLineSelected) {
		$ec = find_max_line_column($self, $br, $er);
	}

	$ec = $self->line($er)->l if $self->{select} eq 'l';
	$self->selection_beg($br, $bc);
	$self->selection_end($er, $ec);
	$self->selection_make($event->{time}, $self->{select} eq 'b');
	
	$self->selection($self->selection(), 1);
	$self->selection_grab($event->{time}, 1);

	$self->selection_beg(1, 0);
	$self->selection_end(1, 0);
	log_message("Copying to clipboard");
	system("~/dotshared/python/tidy-clipboard.py &");
}

sub yank_command {
	my ($self, $event) = @_;
	my ($br, $bc, $er, $ec) = calc_span($self);

	$self->selection_beg($er, 0);
	$self->selection_end($er, find_max_line_column($self, $br, $er));
	$self->selection_make($event->{time});
	$self->selection_grab($event->{time}, 1);

	$self->selection_beg(1, 0);
	$self->selection_end(1, 0);
	log_message("Copying to clipboard");
	system("~/dotshared/python/tidy-clipboard.py &");
}


sub key_press {
	my ($self, $event, $keysym, $char) = @_;
	my $key = chr($keysym);

	my $quitKey = $keysym == 0xff1b || $keysym == 0xff08;
	my $shiftKey = $keysym == 0xffe1;
	if ($quitKey) {
		deactivate($self);
	} elsif ($key ~~ ['k', 'j', 'h', 'l', 'u', 'd', 'e', 'a']) {
		move_cursor($self, $key);
	} elsif ($key ~~ ['b', 'f', 'w']) {
		move_to($self, $key);
	} elsif ($key ~~ ['K', 'J', 'H', 'L', 'E', 'A']) {
		turn_on_select($self, 'b');
		move_cursor($self, lc $key);
	} elsif ($key ~~ ['B', 'F', 'W']) {
		turn_on_select($self, 'b');
		move_to($self, lc $key);
	} elsif ($key eq 's') {
		move_cursor($self, 'l');
		move_to($self, 'b');
		turn_on_select($self, 'n');
		move_to($self, 'w');
		yank_selection($self, $event);
	} elsif ($key eq 'V') {
		toggle_select($self, 'l');
	} elsif ($key eq 'v') {
		toggle_select($self, 'n');
	} elsif ($shiftKey) {
		toggle_select($self, 'b');
	} elsif ($key eq 'y' && $self->{select}) {
		yank_selection($self, $event);
		deactivate($self);
	} elsif ($key eq 'c') {
		yank_command($self, $event);
		deactivate($self);
	}

	return 1;
}

sub move_cursor {
	my ($self, $key) = @_;
	my ($cr, $cc) = $self->screen_cur();
	my $line = $self->line($cr);

	if ($key eq 'k' && $line->beg > $self->top_row) {
		$cr = $line->beg - 1;
	} elsif ($key eq 'j' && $line->end < $self->nrow - 1) {
		$cr = $line->end + 1;
	} elsif ($key eq 'h' && $self->{offset} > 0) {
		$self->{offset} = $line->offset_of($cr, $cc) - 1;
		$self->{dollar} = 0;
	} elsif ($key eq 'l' && $self->{offset} < $line->l - 1) {
		++$self->{offset};
	} elsif ($key eq 'u') {
		if ($line->beg - 10 > $self->top_row) {
			$cr = $line->beg - 10;
		} else {
			$cr = $self->top_row;
		}
	} elsif ($key eq 'd') {
		 if ($line->end + 10 < $self->nrow - 10) {
		 	$cr = $line->end + 10;
		 } else {
		 	$cr = $self->nrow - 1;
		 }
	} elsif ($key eq 'g') {
		($cr, $self->{offset}) = ($self->top_row, 0);
		$self->{dollar} = 0;
	} elsif ($key eq 'G') {
		($cr, $self->{offset}) = ($self->nrow - 1, 0);
		$self->{dollar} = 0;
	} elsif ($key eq 'a') {
		$self->{offset} = 0;
		$self->{dollar} = 0;
	} elsif ($key eq 'e') {
		my $co = $line->offset_of($cr, $cc);
		$self->{dollar} = $co + 1;
		$self->{offset} = $line->l - 1;
	} 

	$line = $self->line($cr);
	$cc = $self->{dollar} || $self->{offset} >= $line->l ? $line->l - 1 :
			$self->{offset};
	$self->screen_cur($line->coord_of($cc));

	status_area($self);
	$self->want_refresh();
	
	()
}


sub move_to {
	my ($self, $key) = @_;
	my ($cr, $cc) = $self->screen_cur();
	my $line = $self->line($cr);
	my $offset = $self->{offset};
	my ($dir, $pattern);
	my ($wrap, $found) = (0, 0);

	if (lc($key) eq 'b') {
		$dir = -1;
	} else {
		$dir = 1;
		++$offset if lc($key) eq 'e';
	}
	$pattern = $self->{patterns}{$key};
	$wrap = 1;

	if ($dir > 0) {
		NEXTDOWN: my $text = substr($line->t, $offset);
		if ($text =~ m/$pattern/) {
			$offset += $+[0] - 1;
			$found = 1;
		} elsif ($wrap && $line->end + 1 < $self->nrow) {
			$cr = $line->end + 1;
			$offset = $line->l - 1;
			if (lc($key) eq 'e') {
				goto NEXTDOWN;
			} else {
				$found = 1;
			}
		}
	} elsif ($dir < 0) {
		NEXTUP: my $text = substr($line->t, 0, $offset);
		if($offset > length($text)) {
			$offset = length($text);
		}
		if ($text =~ m/$pattern/) {
			$offset += $+[0] - length($text) - 1;
			$found = 1;
		} elsif ($wrap) {
			if ($offset > 0) {
				$offset = 0;
				$found = 1;
			} elsif ($line->beg > $self->top_row) {
				$cr = $line->beg - 1;
				$offset = 0;
				#goto NEXTUP;
			}
		}
	}

	if ($found) {
		$self->{dollar} = 0;
		$self->{offset} = $offset;
		$self->screen_cur($line->coord_of($offset));
		$self->want_refresh();
	}

	()
}

sub tt_write {
	return 1;
}


sub refresh {
	my ($self) = @_;
	my $reverse_cursor = $self->{select} ne 'l';
	my ($cr, $cc) = $self->screen_cur();

	if ($self->{select}) {
		my ($br, $bc, $er, $ec) = calc_span($self);

		if ($self->{select} eq 'b') {
			delete $self->{selection} if $self->{selection};
			my $co = $self->line($cr)->offset_of($cr, $cc);
			my $dollar = $self->{dollar} && $co >= $self->{dollar} - 1;

			my $r = $br;
			while ($r <= $er) {
				my $line = $self->line($r);
				if ($bc < $line->l) {
					$ec = $line->l if $dollar;
					$self->{selection} .= substr($line->t, $bc, $ec - $bc);
					my ($br, $bc) = $line->coord_of($bc);
					my ($er, $ec) = $line->coord_of($ec <= $line->l ? $ec : $line->l);
					$self->scr_xor_span($br, $bc, $er, $ec, urxvt::RS_RVid);
				} elsif ($r == $cr) {
					$reverse_cursor = 0;
				}
				$self->{selection} .= "\n" if $line->end < $er;
				$r = $line->end + 1;
			}
		} else {
			$self->scr_xor_span($br, $bc, $er, $ec, urxvt::RS_RVid);
		}

		if ($reverse_cursor) {
			# make the cursor visible again
			$self->scr_xor_span($cr, $cc, $cr, $cc + 1, urxvt::RS_RVid);
		}
	}

	# scroll the current cursor position into visible area
	if ($cr < $self->view_start()) {
		$self->view_start($cr);
	} elsif ($cr >= $self->view_start() + $self->nrow) {
		$self->view_start($cr - $self->nrow + 1);
	}

	()
}


sub activate {
	my ($self, $search) = @_;
	$self->cmd_parse("\033[1 q");

	$self->{active} = 1;

	$self->{select} = '';
	$self->{dollar} = 0;
	$self->{move_to} = 0;

	($self->{oldcr}, $self->{oldcc}) = $self->screen_cur();
	($self->{srhcr}, $self->{srhcc}) = $self->screen_cur();
	$self->{old_view_start} = $self->view_start();
	$self->{old_pty_ev_events} = $self->pty_ev_events(urxvt::EV_NONE);

	my $line = $self->line($self->{oldcr});
	$self->{offset} = $line->offset_of($self->{oldcr}, $self->{oldcc});

	$self->selection_beg(1, 0);
	$self->selection_end(1, 0);

	$self->enable(
		key_press     => \&key_press,
		refresh_begin => \&refresh,
		refresh_end   => \&refresh,
		tt_write      => \&tt_write,
	);

	$self->{overlay_len} = 0;
	status_area($self);

	()
}


sub deactivate {
	my ($self) = @_;
	$self->cmd_parse("\033[3 q");

	$self->selection_beg(1, 0);
	$self->selection_end(1, 0);

	delete $self->{overlay} if $self->{overlay};
	delete $self->{selection} if $self->{selection};

	$self->disable("key_press", "refresh_begin", "refresh_end", "tt_write");
	$self->screen_cur($self->{oldcr}, $self->{oldcc});
	$self->view_start($self->{old_view_start});
	$self->pty_ev_events($self->{old_pty_ev_events});

	$self->want_refresh();

	$self->{active} = 0;

	()
}


sub status_area {
	my ($self, $extra) = @_;
	my ($stat, $stat_len);

	if ($self->{search}) {
		$stat_len = $self->ncol;
		$stat = $self->{search} . ' ' x ($stat_len - length($self->{search}));
	} else {
		if ($self->{select}) {
			$stat = "-V" . ($self->{select} ne 'n' ? uc($self->{select}) : "") . "- ";
		}

		if ($self->top_row == 0) {
			$stat .= "[100 %]";
		} elsif ($self->view_start() == $self->top_row) {
			$stat .= "[  0 %]";
		} elsif ($self->view_start() == 0) {
			$stat .= "[100 %]";
		} else {
			$stat .= sprintf("[%3d %]",
					($self->top_row - $self->view_start) * 100 / $self->top_row);
		}
		
		$stat = "$extra $stat" if $extra;
		$stat_len = length($stat);
	}

	if (!$self->{overlay} || $self->{overlay_len} != $stat_len) {
		delete $self->{overlay} if $self->{overlay};
		$self->{overlay} = $self->overlay(-1, -1, $stat_len, 1,
				urxvt::OVERLAY_RSTYLE, 0);
		$self->{overlay_len} = $stat_len;
	}

	$self->{overlay}->set(0, 0, $self->special_encode($stat));
	$self->{overlay}->show();

	()
}


sub toggle_select {
	my ($self, $mode) = @_;

	if ($self->{select} eq $mode) {
		$self->{select} = '';
	} else {
		if (not $self->{select}) {
			($self->{ar}, $self->{ac}) = $self->screen_cur();
		}
		$self->{select} = $mode;
	}

	status_area($self);
	$self->want_refresh();

	()
}

sub turn_on_select {
	my ($self, $mode) = @_;

	if (not $self->{select}) {
		($self->{ar}, $self->{ac}) = $self->screen_cur();
	}
	$self->{select} = $mode;

	status_area($self);
	$self->want_refresh();
	()
}

sub turn_off_select {
	my ($self) = @_;
	$self->{select} = '';
	status_area($self);
	$self->want_refresh();
	()
}

sub calc_span {
	my ($self) = @_;
	my ($cr, $cc) = $self->screen_cur();
	my ($br, $bc, $er, $ec);
	
	if ($self->{select} eq 'b') {
		$br = $self->line($cr)->beg;
		$bc = $self->line($cr)->offset_of($cr, $cc);
		$er = $self->line($self->{ar})->beg;
		$ec = $self->line($self->{ar})->offset_of($self->{ar}, $self->{ac});

		($br, $er) = ($er, $br) if $br > $er;
		($bc, $ec) = ($ec, $bc) if $bc > $ec;
	} else {
		if ($cr < $self->{ar}) {
			($br, $bc, $er, $ec) = ($cr, $cc, $self->{ar}, $self->{ac});
		} elsif ($cr > $self->{ar}) {
			($br, $bc, $er, $ec) = ($self->{ar}, $self->{ac}, $cr, $cc);
		} else {
			($br, $er) = ($cr, $cr);
			($bc, $ec) = $cc < $self->{ac} ? ($cc, $self->{ac}) : ($self->{ac}, $cc);
		}
	}

	if ($self->{select} eq 'l') {
		($br, $er) = ($self->line($br)->beg, $self->line($er)->end);
		($bc, $ec) = (0, $self->ncol);
	} else {
		++$ec;
	}
	return ($br, $bc, $er, $ec);
}
